Common subdirectories: ../misc/model_generation/raw_generated/__pycache__ and ../grafana_dashboard/model/__pycache__
diff -Nau ../misc/model_generation/raw_generated/dashboard_types_gen.py ../grafana_dashboard/model/dashboard_types_gen.py
--- ../misc/model_generation/raw_generated/dashboard_types_gen.py	2023-07-11 14:03:28.000000000 +0800
+++ ../grafana_dashboard/model/dashboard_types_gen.py	2023-07-11 14:54:39.000000000 +0800
@@ -6,9 +6,13 @@
 from enum import Enum
 from typing import Any, Dict, List, Optional, Union
 
-from grafana_dashboard.utils import MyBaseModel
 from pydantic import Field, conint, constr
 
+from grafana_dashboard.model import timeseriespanelcfg_types_gen
+from grafana_dashboard.model.lokidataquery_types_gen import LokiDataQuery
+from grafana_dashboard.model.prometheusdataquery_types_gen import PrometheusDataQuery
+from grafana_dashboard.utils import MyBaseModel
+
 
 class AnnotationPanelFilter(MyBaseModel):
     exclude: Optional[bool] = Field(
@@ -181,8 +185,9 @@
     empty = 'empty'
 
 
-class Target(MyBaseModel):
-    pass
+# NOTE REMOVED
+# class Target(MyBaseModel):
+#     pass
 
 
 class Threshold(MyBaseModel):
@@ -514,7 +519,12 @@
         None, description='The behavior when clicking on a result'
     )
     noValue: Optional[str] = Field(None, description='Alternative to empty string')
-    custom: Optional[Dict[str, Any]] = Field(
+    # NOTE MODIFIED
+    # TODO add other panel options...
+    custom: Optional[Union[
+        timeseriespanelcfg_types_gen.GraphFieldConfig,
+        Dict[str, Any]
+    ]] = Field(
         None,
         description='custom is specified by the PanelFieldConfig field\nin panel plugin schemas.',
     )
@@ -535,7 +545,7 @@
         description='FIXME this almost certainly has to be changed in favor of scuemata versions',
     )
     tags: Optional[List[str]] = Field(None, description='TODO docs')
-    targets: Optional[List[Target]] = Field(None, description='TODO docs')
+    targets: Optional[List[Union[PrometheusDataQuery, LokiDataQuery, Dict]]] = Field(None)  # NOTE MODIFIED
     title: Optional[str] = Field(None, description='Panel title.')
     description: Optional[str] = Field(None, description='Description.')
     transparent: Optional[bool] = Field(
@@ -574,7 +584,12 @@
         None, description='TODO docs\nTODO tighter constraint'
     )
     libraryPanel: Optional[LibraryPanelRef] = None
-    options: Dict[str, Any] = Field(
+    # NOTE MODIFIED
+    # TODO add other panel options...
+    options: Union[
+        timeseriespanelcfg_types_gen.PanelOptions,
+        Dict[str, Any]
+    ] = Field(
         ...,
         description='options is specified by the PanelOptions field in panel\nplugin schemas.',
     )
@@ -582,7 +597,7 @@
 
 
 class RowPanel(MyBaseModel):
-    type: Type2
+    type: Type2 = 'row'  # NOTE MODIFIED
     collapsed: Optional[bool] = False
     title: Optional[str] = None
     datasource: Optional[Datasource] = Field(
@@ -590,7 +605,7 @@
     )
     gridPos: Optional[GridPos] = None
     id: conint(ge=0, le=4294967295)
-    panels: List[Union[Panel, GraphPanel, HeatmapPanel]]
+    panels: List[Union[Panel, GraphPanel, HeatmapPanel]] = []  # NOTE MODIFIED
     repeat: Optional[str] = Field(
         None, description='Name of template variable to repeat for.'
     )
