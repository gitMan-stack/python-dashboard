Common subdirectories: ../misc/model_generation/raw_generated/__pycache__ and ../grafana_dashboard/model/__pycache__
diff -Nau ../misc/model_generation/raw_generated/barchartpanelcfg_types_gen.py ../grafana_dashboard/model/barchartpanelcfg_types_gen.py
--- ../misc/model_generation/raw_generated/barchartpanelcfg_types_gen.py	2023-07-11 14:03:33.000000000 +0800
+++ ../grafana_dashboard/model/barchartpanelcfg_types_gen.py	2023-07-11 16:24:00.000000000 +0800
@@ -1,12 +1,10 @@
 # AUTO GENERATED, PLEASE DO NOT MODIFY BY HAND
-
 from __future__ import annotations
 
-from enum import Enum
-from typing import List, Optional
+from pydantic import Field, confloat, conint
 
+from grafana_dashboard.extracted_generated_common_models import *
 from grafana_dashboard.utils import MyBaseModel
-from pydantic import Field, confloat, conint
 
 
 class AxisColorMode(Enum):
@@ -50,17 +48,6 @@
     hideFrom: Optional[HideSeriesConfig] = None
 
 
-class LegendDisplayMode(Enum):
-    list = 'list'
-    table = 'table'
-    hidden = 'hidden'
-
-
-class LegendPlacement(Enum):
-    bottom = 'bottom'
-    right = 'right'
-
-
 class ScaleDistribution(Enum):
     linear = 'linear'
     log = 'log'
@@ -74,42 +61,18 @@
     linearThreshold: Optional[float] = None
 
 
-class SortOrder(Enum):
-    asc = 'asc'
-    desc = 'desc'
-    none = 'none'
-
-
 class StackingMode(Enum):
     none = 'none'
     normal = 'normal'
     percent = 'percent'
 
 
-class TooltipDisplayMode(Enum):
-    single = 'single'
-    multi = 'multi'
-    none = 'none'
-
-
 class VisibilityMode(Enum):
     auto = 'auto'
     never = 'never'
     always = 'always'
 
 
-class VizLegendOptions(MyBaseModel):
-    displayMode: LegendDisplayMode
-    placement: LegendPlacement
-    showLegend: bool
-    asTable: Optional[bool] = None
-    isVisible: Optional[bool] = None
-    sortBy: Optional[str] = None
-    sortDesc: Optional[bool] = None
-    width: Optional[float] = None
-    calcs: List[str]
-
-
 class VizOrientation(Enum):
     auto = 'auto'
     vertical = 'vertical'
@@ -121,11 +84,6 @@
     valueSize: Optional[float] = Field(None, description='Explicit value text size')
 
 
-class VizTooltipOptions(MyBaseModel):
-    mode: TooltipDisplayMode
-    sort: SortOrder
-
-
 class AxisConfig(MyBaseModel):
     axisPlacement: Optional[AxisPlacement] = None
     axisColorMode: Optional[AxisColorMode] = None
diff -Nau ../misc/model_generation/raw_generated/bargaugepanelcfg_types_gen.py ../grafana_dashboard/model/bargaugepanelcfg_types_gen.py
--- ../misc/model_generation/raw_generated/bargaugepanelcfg_types_gen.py	2023-07-11 14:03:41.000000000 +0800
+++ ../grafana_dashboard/model/bargaugepanelcfg_types_gen.py	2023-07-11 22:06:15.000000000 +0800
@@ -5,9 +5,10 @@
 from enum import Enum
 from typing import List, Optional
 
-from grafana_dashboard.utils import MyBaseModel
 from pydantic import Field, conint
 
+from grafana_dashboard.utils import MyBaseModel
+
 
 class BarGaugeDisplayMode(Enum):
     basic = 'basic'
@@ -55,7 +56,7 @@
 
 class PanelOptions(SingleStatBaseOptions):
     displayMode: BarGaugeDisplayMode
-    valueMode: BarGaugeValueMode
+    valueMode: Optional[BarGaugeValueMode] = None  # NOTE MODIFIED
     showUnfilled: bool
     minVizWidth: conint(ge=0, le=4294967295)
     minVizHeight: conint(ge=0, le=4294967295)
diff -Nau ../misc/model_generation/raw_generated/dashboard_types_gen.py ../grafana_dashboard/model/dashboard_types_gen.py
--- ../misc/model_generation/raw_generated/dashboard_types_gen.py	2023-07-11 14:03:28.000000000 +0800
+++ ../grafana_dashboard/model/dashboard_types_gen.py	2023-07-11 21:41:55.000000000 +0800
@@ -6,9 +6,13 @@
 from enum import Enum
 from typing import Any, Dict, List, Optional, Union
 
-from grafana_dashboard.utils import MyBaseModel
 from pydantic import Field, conint, constr
 
+from grafana_dashboard.model import timeseriespanelcfg_types_gen, piechartpanelcfg_types_gen
+from grafana_dashboard.model.lokidataquery_types_gen import LokiDataQuery
+from grafana_dashboard.model.prometheusdataquery_types_gen import PrometheusDataQuery
+from grafana_dashboard.utils import MyBaseModel
+
 
 class AnnotationPanelFilter(MyBaseModel):
     exclude: Optional[bool] = Field(
@@ -44,9 +48,10 @@
 
 
 class DashboardCursorSync(Enum):
-    integer_0 = 0
-    integer_1 = 1
-    integer_2 = 2
+    # NOTE RENAMED
+    not_shared = 0
+    shared_crosshair = 1
+    shared_tooltip = 2
 
 
 class DashboardLinkType(Enum):
@@ -181,8 +186,9 @@
     empty = 'empty'
 
 
-class Target(MyBaseModel):
-    pass
+# NOTE REMOVED
+# class Target(MyBaseModel):
+#     pass
 
 
 class Threshold(MyBaseModel):
@@ -349,11 +355,11 @@
 
 class DashboardLink(MyBaseModel):
     title: str
-    type: DashboardLinkType
-    icon: str
-    tooltip: str
+    type: DashboardLinkType = None  # NOTE MODIFIED
+    icon: str = []  # NOTE MODIFIED
+    tooltip: str = []  # NOTE MODIFIED
     url: str
-    tags: List[str]
+    tags: List[str] = []  # NOTE MODIFIED
     asDropdown: Optional[bool] = False
     targetBlank: Optional[bool] = False
     includeVars: Optional[bool] = False
@@ -440,7 +446,8 @@
 
 
 class VariableModel(MyBaseModel):
-    id: Optional[str] = '00000000-0000-0000-0000-000000000000'
+    # NOTE MODIFIED https://github.com/fzyzcjy/yplusplus/issues/10127#issuecomment-1630624655
+    id: Optional[str] = None
     type: VariableType
     name: str
     label: Optional[str] = None
@@ -448,18 +455,32 @@
     global_: Optional[bool] = Field(False, alias='global')
     hide: VariableHide
     skipUrlSync: Optional[bool] = False
-    index: Optional[conint(ge=-2147483648, le=2147483647)] = -1
-    state: LoadingState
+    # NOTE MODIFIED https://github.com/fzyzcjy/yplusplus/issues/10127#issuecomment-1630624655
+    index: Optional[conint(ge=-2147483648, le=2147483647)] = 0
+    state: LoadingState = None  # NOTE MODIFIED
     error: Optional[Dict[str, Any]] = None
     description: Optional[str] = None
     query: Optional[Union[str, Dict[str, Any]]] = Field(
         None, description='TODO: Move this into a separated QueryVariableModel type'
     )
-    datasource: Optional[DataSourceRef] = None
+    datasource: Optional[Union[DataSourceRef, str]] = None  # NOTE MODIFIED add `str`
+
+    # NOTE these fields are *not* in schema, but added manually after they are observed
+    current: Dict[str, Any] = {}
+    includeAll: bool = False
+    multi: bool = False
+    options: List[Any] = []
+    refresh: int = 1
+    regex: str = ''
+    sort: Optional[int] = None
+    tagValuesQuery: Optional[str] = None
+    tagQuery: Optional[str] = None
+    useTags: Optional[bool] = None
+    definition: Optional[str] = None
 
 
 class Templating(MyBaseModel):
-    list: Optional[List[VariableModel]] = None
+    list: List[VariableModel]  # NOTE MODIFIED
 
 
 class Status(MyBaseModel):
@@ -473,7 +494,8 @@
 
 
 class AnnotationContainer(MyBaseModel):
-    list: Optional[List[AnnotationQuery]] = None
+    # NOTE MODIFIED - should allow any dict for custom data source
+    list: Optional[List[Union[AnnotationQuery, Dict[str, Any]]]] = []  # NOTE MODIFIED
 
 
 class FieldConfig(MyBaseModel):
@@ -506,7 +528,7 @@
     min: Optional[float] = None
     max: Optional[float] = None
     mappings: Optional[List[ValueMapping]] = Field(
-        None, description='Convert input values into a display string'
+        [], description='Convert input values into a display string'  # NOTE MODIFIED
     )
     thresholds: Optional[ThresholdsConfig] = None
     color: Optional[FieldColor] = None
@@ -514,15 +536,20 @@
         None, description='The behavior when clicking on a result'
     )
     noValue: Optional[str] = Field(None, description='Alternative to empty string')
-    custom: Optional[Dict[str, Any]] = Field(
+    # NOTE MODIFIED
+    # TODO add other panel options...
+    custom: Optional[Union[
+        timeseriespanelcfg_types_gen.GraphFieldConfig,
+        Dict[str, Any]
+    ]] = Field(
         None,
         description='custom is specified by the PanelFieldConfig field\nin panel plugin schemas.',
     )
 
 
 class FieldConfigSource(MyBaseModel):
-    defaults: FieldConfig
-    overrides: List[Override]
+    defaults: FieldConfig = FieldConfig()  # NOTE MODIFIED
+    overrides: List[Override] = []  # NOTE MODIFIED
 
 
 class Panel(MyBaseModel):
@@ -535,13 +562,18 @@
         description='FIXME this almost certainly has to be changed in favor of scuemata versions',
     )
     tags: Optional[List[str]] = Field(None, description='TODO docs')
-    targets: Optional[List[Target]] = Field(None, description='TODO docs')
+    # NOTE MODIFIED, originally it is (empty class) `Target`
+    targets: Optional[List[Union[
+        PrometheusDataQuery,
+        LokiDataQuery,
+        Dict[str, Any]
+    ]]] = Field(None)
     title: Optional[str] = Field(None, description='Panel title.')
     description: Optional[str] = Field(None, description='Description.')
     transparent: Optional[bool] = Field(
         False, description='Whether to display the panel without a background.'
     )
-    datasource: Optional[Datasource] = Field(
+    datasource: Optional[Union[str, Datasource]] = Field(  # NOTE MODIFIED add `str`
         None, description='The datasource used in all targets.'
     )
     gridPos: Optional[GridPos] = None
@@ -558,12 +590,12 @@
     )
     repeatPanelId: Optional[int] = Field(None, description='Id of the repeating panel.')
     maxDataPoints: Optional[float] = Field(None, description='TODO docs')
-    thresholds: Optional[List] = Field(
+    thresholds: Optional[Any] = Field(  # NOTE MODIFIED List->Any, since see double in production
         None,
         description='TODO docs - seems to be an old field from old dashboard alerts?',
     )
     timeRegions: Optional[List] = Field(None, description='TODO docs')
-    transformations: List[DataTransformerConfig]
+    transformations: List[DataTransformerConfig] = []  # NOTE MODIFIED
     interval: Optional[str] = Field(
         None, description='TODO docs\nTODO tighter constraint'
     )
@@ -574,23 +606,29 @@
         None, description='TODO docs\nTODO tighter constraint'
     )
     libraryPanel: Optional[LibraryPanelRef] = None
-    options: Dict[str, Any] = Field(
+    # NOTE MODIFIED
+    # TODO add other panel options...
+    options: Union[
+        timeseriespanelcfg_types_gen.PanelOptions,
+        piechartpanelcfg_types_gen.PanelOptions,
+        Dict[str, Any]
+    ] = Field(
         ...,
         description='options is specified by the PanelOptions field in panel\nplugin schemas.',
     )
-    fieldConfig: FieldConfigSource
+    fieldConfig: FieldConfigSource = FieldConfigSource()  # NOTE MODIFIED
 
 
 class RowPanel(MyBaseModel):
-    type: Type2
+    type: Type2 = 'row'  # NOTE MODIFIED
     collapsed: Optional[bool] = False
     title: Optional[str] = None
-    datasource: Optional[Datasource] = Field(
+    datasource: Optional[Union[Datasource, str]] = Field(  # NOTE MODIFIED add `str`
         None, description='Name of default datasource.'
     )
     gridPos: Optional[GridPos] = None
-    id: conint(ge=0, le=4294967295)
-    panels: List[Union[Panel, GraphPanel, HeatmapPanel]]
+    id: Optional[conint(ge=0, le=4294967295)] = None  # NOTE MODIFIED
+    panels: List[Union[Panel, GraphPanel, HeatmapPanel]] = []  # NOTE MODIFIED
     repeat: Optional[str] = Field(
         None, description='Name of template variable to repeat for.'
     )
@@ -657,11 +695,26 @@
         description='Version of the dashboard, incremented each time the dashboard is updated.',
     )
     panels: Optional[List[Union[Panel, RowPanel, GraphPanel, HeatmapPanel]]] = None
-    templating: Optional[Templating] = Field(None, description='TODO docs')
-    annotations: Optional[AnnotationContainer] = None
+    templating: Templating = Field(Templating(list=[]), description='TODO docs')  # NOTE MODIFIED
+    annotations: Optional[AnnotationContainer] = AnnotationContainer()  # NOTE MODIFIED
     links: Optional[List[DashboardLink]] = Field(None, description='TODO docs')
     snapshot: Optional[Snapshot] = None
 
+    # NOTE MODIFIED add
+    def auto_panel_ids(self):
+        from grafana_dashboard.utils import dashboard_auto_panel_ids
+        dashboard_auto_panel_ids(self)
+        return self
+
+    # NOTE MODIFIED add
+    def to_grafana_json(self):
+        return self.json(
+            # NOTE need by_alias for `Time.from_` #10119
+            by_alias=True,
+            sort_keys=True,
+            indent=2,
+        )
+
 
 class Dashboard(MyBaseModel):
     metadata: Metadata = Field(
diff -Nau ../misc/model_generation/raw_generated/dashboardlistpanelcfg_types_gen.py ../grafana_dashboard/model/dashboardlistpanelcfg_types_gen.py
--- ../misc/model_generation/raw_generated/dashboardlistpanelcfg_types_gen.py	2023-07-11 14:03:43.000000000 +0800
+++ ../grafana_dashboard/model/dashboardlistpanelcfg_types_gen.py	2023-07-11 18:42:23.000000000 +0800
@@ -17,7 +17,7 @@
     maxItems: Optional[int] = 10
     query: Optional[str] = ''
     folderId: Optional[int] = None
-    tags: List[str]
+    tags: List[str] = []  # NOTE MODIFIED
 
 
 class DashboardListPanelCfg(MyBaseModel):
diff -Nau ../misc/model_generation/raw_generated/histogrampanelcfg_types_gen.py ../grafana_dashboard/model/histogrampanelcfg_types_gen.py
--- ../misc/model_generation/raw_generated/histogrampanelcfg_types_gen.py	2023-07-11 14:03:44.000000000 +0800
+++ ../grafana_dashboard/model/histogrampanelcfg_types_gen.py	2023-07-11 16:24:00.000000000 +0800
@@ -1,12 +1,10 @@
 # AUTO GENERATED, PLEASE DO NOT MODIFY BY HAND
-
 from __future__ import annotations
 
-from enum import Enum
-from typing import List, Optional
+from pydantic import Field, conint
 
+from grafana_dashboard.extracted_generated_common_models import *
 from grafana_dashboard.utils import MyBaseModel
-from pydantic import Field, conint
 
 
 class AxisColorMode(Enum):
@@ -40,17 +38,6 @@
     hideFrom: Optional[HideSeriesConfig] = None
 
 
-class LegendDisplayMode(Enum):
-    list = 'list'
-    table = 'table'
-    hidden = 'hidden'
-
-
-class LegendPlacement(Enum):
-    bottom = 'bottom'
-    right = 'right'
-
-
 class ScaleDistribution(Enum):
     linear = 'linear'
     log = 'log'
@@ -64,35 +51,6 @@
     linearThreshold: Optional[float] = None
 
 
-class SortOrder(Enum):
-    asc = 'asc'
-    desc = 'desc'
-    none = 'none'
-
-
-class TooltipDisplayMode(Enum):
-    single = 'single'
-    multi = 'multi'
-    none = 'none'
-
-
-class VizLegendOptions(MyBaseModel):
-    displayMode: LegendDisplayMode
-    placement: LegendPlacement
-    showLegend: bool
-    asTable: Optional[bool] = None
-    isVisible: Optional[bool] = None
-    sortBy: Optional[str] = None
-    sortDesc: Optional[bool] = None
-    width: Optional[float] = None
-    calcs: List[str]
-
-
-class VizTooltipOptions(MyBaseModel):
-    mode: TooltipDisplayMode
-    sort: SortOrder
-
-
 class AxisConfig(MyBaseModel):
     axisPlacement: Optional[AxisPlacement] = None
     axisColorMode: Optional[AxisColorMode] = None
diff -Nau ../misc/model_generation/raw_generated/logspanelcfg_types_gen.py ../grafana_dashboard/model/logspanelcfg_types_gen.py
--- ../misc/model_generation/raw_generated/logspanelcfg_types_gen.py	2023-07-11 14:03:37.000000000 +0800
+++ ../grafana_dashboard/model/logspanelcfg_types_gen.py	2023-07-11 18:43:39.000000000 +0800
@@ -20,14 +20,14 @@
 
 
 class PanelOptions(MyBaseModel):
-    showLabels: bool
-    showCommonLabels: bool
-    showTime: bool
-    wrapLogMessage: bool
-    prettifyLogMessage: bool
-    enableLogDetails: bool
-    sortOrder: LogsSortOrder
-    dedupStrategy: LogsDedupStrategy
+    showLabels: bool = False  # NOTE MODIFIED
+    showCommonLabels: bool = False  # NOTE MODIFIED
+    showTime: bool = False  # NOTE MODIFIED
+    wrapLogMessage: bool = False  # NOTE MODIFIED # NOTE MODIFIED
+    prettifyLogMessage: bool = False  # NOTE MODIFIED
+    enableLogDetails: bool = False  # NOTE MODIFIED
+    sortOrder: LogsSortOrder = LogsSortOrder.Descending  # NOTE MODIFIED
+    dedupStrategy: LogsDedupStrategy = LogsDedupStrategy.none  # NOTE MODIFIED
 
 
 class LogsPanelCfg(MyBaseModel):
diff -Nau ../misc/model_generation/raw_generated/lokidataquery_types_gen.py ../grafana_dashboard/model/lokidataquery_types_gen.py
--- ../misc/model_generation/raw_generated/lokidataquery_types_gen.py	2023-07-11 14:03:32.000000000 +0800
+++ ../grafana_dashboard/model/lokidataquery_types_gen.py	2023-07-11 18:57:14.000000000 +0800
@@ -5,13 +5,14 @@
 from enum import Enum
 from typing import Any, Optional
 
-from grafana_dashboard.utils import MyBaseModel
 from pydantic import Field
 
+from grafana_dashboard.utils import MyBaseModel
+
 
 class DataQuery(MyBaseModel):
     refId: str = Field(
-        ...,
+        None,  # NOTE MODIFIED
         description='A unique identifier for the query within the list of targets.\nIn server side expressions, the refId is used as a variable name to identify results.\nBy default, the UI will assign A->Z; however setting meaningful names may be useful.',
     )
     hide: Optional[bool] = Field(
diff -Nau ../misc/model_generation/raw_generated/piechartpanelcfg_types_gen.py ../grafana_dashboard/model/piechartpanelcfg_types_gen.py
--- ../misc/model_generation/raw_generated/piechartpanelcfg_types_gen.py	2023-07-11 14:03:36.000000000 +0800
+++ ../grafana_dashboard/model/piechartpanelcfg_types_gen.py	2023-07-11 16:24:00.000000000 +0800
@@ -1,12 +1,10 @@
 # AUTO GENERATED, PLEASE DO NOT MODIFY BY HAND
-
 from __future__ import annotations
 
-from enum import Enum
-from typing import List, Optional
+from pydantic import Field
 
+from grafana_dashboard.extracted_generated_common_models import *
 from grafana_dashboard.utils import MyBaseModel
-from pydantic import Field
 
 
 class HideSeriesConfig(MyBaseModel):
@@ -19,17 +17,6 @@
     hideFrom: Optional[HideSeriesConfig] = None
 
 
-class LegendDisplayMode(Enum):
-    list = 'list'
-    table = 'table'
-    hidden = 'hidden'
-
-
-class LegendPlacement(Enum):
-    bottom = 'bottom'
-    right = 'right'
-
-
 class PieChartLabels(Enum):
     name = 'name'
     value = 'value'
@@ -50,7 +37,7 @@
     values: Optional[bool] = Field(None, description='If true show each row value')
     limit: Optional[float] = Field(None, description='if showing all values limit')
     calcs: List[str] = Field(
-        ..., description='When !values, pick one value for the whole field'
+        [], description='When !values, pick one value for the whole field'  # NOTE MODIFIED
     )
     fields: Optional[str] = Field(
         None,
@@ -58,30 +45,6 @@
     )
 
 
-class SortOrder(Enum):
-    asc = 'asc'
-    desc = 'desc'
-    none = 'none'
-
-
-class TooltipDisplayMode(Enum):
-    single = 'single'
-    multi = 'multi'
-    none = 'none'
-
-
-class VizLegendOptions(MyBaseModel):
-    displayMode: LegendDisplayMode
-    placement: LegendPlacement
-    showLegend: bool
-    asTable: Optional[bool] = None
-    isVisible: Optional[bool] = None
-    sortBy: Optional[str] = None
-    sortDesc: Optional[bool] = None
-    width: Optional[float] = None
-    calcs: List[str]
-
-
 class VizOrientation(Enum):
     auto = 'auto'
     vertical = 'vertical'
@@ -93,32 +56,27 @@
     valueSize: Optional[float] = Field(None, description='Explicit value text size')
 
 
-class VizTooltipOptions(MyBaseModel):
-    mode: TooltipDisplayMode
-    sort: SortOrder
-
-
 class OptionsWithTextFormatting(MyBaseModel):
     text: Optional[VizTextDisplayOptions] = None
 
 
 class OptionsWithTooltip(MyBaseModel):
-    tooltip: VizTooltipOptions
+    tooltip: VizTooltipOptions = VizTooltipOptions()  # NOTE MODIFIED
 
 
 class PieChartLegendOptions(VizLegendOptions):
-    values: List[PieChartLegendValues]
+    values: List[PieChartLegendValues] = []  # NOTE MODIFIED
 
 
 class SingleStatBaseOptions(OptionsWithTextFormatting):
-    reduceOptions: ReduceDataOptions
-    orientation: VizOrientation
+    reduceOptions: Optional[ReduceDataOptions] = ReduceDataOptions()  # NOTE MODIFIED
+    orientation: Optional[VizOrientation] = None  # NOTE MODIFIED
 
 
 class PanelOptions(OptionsWithTooltip, SingleStatBaseOptions):
-    pieType: PieChartType
-    displayLabels: List[PieChartLabels]
-    legend: PieChartLegendOptions
+    pieType: PieChartType = PieChartType.pie  # NOTE MODIFIED
+    displayLabels: List[PieChartLabels] = []  # NOTE MODIFIED
+    legend: PieChartLegendOptions = PieChartLegendOptions()  # NOTE MODIFIED
 
 
 class PieChartPanelCfg(MyBaseModel):
diff -Nau ../misc/model_generation/raw_generated/prometheusdataquery_types_gen.py ../grafana_dashboard/model/prometheusdataquery_types_gen.py
--- ../misc/model_generation/raw_generated/prometheusdataquery_types_gen.py	2023-07-11 14:03:40.000000000 +0800
+++ ../grafana_dashboard/model/prometheusdataquery_types_gen.py	2023-07-11 22:18:07.000000000 +0800
@@ -5,13 +5,14 @@
 from enum import Enum
 from typing import Any, Optional
 
-from grafana_dashboard.utils import MyBaseModel
 from pydantic import Field
 
+from grafana_dashboard.utils import MyBaseModel
+
 
 class DataQuery(MyBaseModel):
     refId: str = Field(
-        ...,
+        '',  # NOTE MODIFIED
         description='A unique identifier for the query within the list of targets.\nIn server side expressions, the refId is used as a variable name to identify results.\nBy default, the UI will assign A->Z; however setting meaningful names may be useful.',
     )
     hide: Optional[bool] = Field(
diff -Nau ../misc/model_generation/raw_generated/statetimelinepanelcfg_types_gen.py ../grafana_dashboard/model/statetimelinepanelcfg_types_gen.py
--- ../misc/model_generation/raw_generated/statetimelinepanelcfg_types_gen.py	2023-07-11 14:03:42.000000000 +0800
+++ ../grafana_dashboard/model/statetimelinepanelcfg_types_gen.py	2023-07-11 16:24:00.000000000 +0800
@@ -1,13 +1,13 @@
 # AUTO GENERATED, PLEASE DO NOT MODIFY BY HAND
-
 from __future__ import annotations
 
-from enum import Enum
-from typing import Any, List, Optional, Union
+from typing import Any, Union
 
-from grafana_dashboard.utils import MyBaseModel
 from pydantic import Field, confloat, conint
 
+from grafana_dashboard.extracted_generated_common_models import *
+from grafana_dashboard.utils import MyBaseModel
+
 
 class HideSeriesConfig(MyBaseModel):
     tooltip: bool
@@ -19,23 +19,6 @@
     hideFrom: Optional[HideSeriesConfig] = None
 
 
-class LegendDisplayMode(Enum):
-    list = 'list'
-    table = 'table'
-    hidden = 'hidden'
-
-
-class LegendPlacement(Enum):
-    bottom = 'bottom'
-    right = 'right'
-
-
-class SortOrder(Enum):
-    asc = 'asc'
-    desc = 'desc'
-    none = 'none'
-
-
 class PanelFieldConfig(HideableFieldConfig):
     lineWidth: Optional[conint(ge=0, le=10)] = 0
     fillOpacity: Optional[conint(ge=0, le=100)] = 70
@@ -58,35 +41,12 @@
     right = 'right'
 
 
-class TooltipDisplayMode(Enum):
-    single = 'single'
-    multi = 'multi'
-    none = 'none'
-
-
 class VisibilityMode(Enum):
     auto = 'auto'
     never = 'never'
     always = 'always'
 
 
-class VizLegendOptions(MyBaseModel):
-    displayMode: LegendDisplayMode
-    placement: LegendPlacement
-    showLegend: bool
-    asTable: Optional[bool] = None
-    isVisible: Optional[bool] = None
-    sortBy: Optional[str] = None
-    sortDesc: Optional[bool] = None
-    width: Optional[float] = None
-    calcs: List[str]
-
-
-class VizTooltipOptions(MyBaseModel):
-    mode: TooltipDisplayMode
-    sort: SortOrder
-
-
 class OptionsWithLegend(MyBaseModel):
     legend: VizLegendOptions
 
diff -Nau ../misc/model_generation/raw_generated/statpanelcfg_types_gen.py ../grafana_dashboard/model/statpanelcfg_types_gen.py
--- ../misc/model_generation/raw_generated/statpanelcfg_types_gen.py	2023-07-11 14:03:37.000000000 +0800
+++ ../grafana_dashboard/model/statpanelcfg_types_gen.py	2023-07-11 21:09:40.000000000 +0800
@@ -5,9 +5,10 @@
 from enum import Enum
 from typing import List, Optional
 
-from grafana_dashboard.utils import MyBaseModel
 from pydantic import Field
 
+from grafana_dashboard.utils import MyBaseModel
+
 
 class BigValueColorMode(Enum):
     value = 'value'
@@ -36,13 +37,13 @@
 
 
 class ReduceDataOptions(MyBaseModel):
-    values: Optional[bool] = Field(None, description='If true show each row value')
+    values: Optional[bool] = Field(False, description='If true show each row value')  # NOTE MODIFIED
     limit: Optional[float] = Field(None, description='if showing all values limit')
     calcs: List[str] = Field(
-        ..., description='When !values, pick one value for the whole field'
+        [], description='When !values, pick one value for the whole field'  # NOTE MODIFIED
     )
     fields: Optional[str] = Field(
-        None,
+        '',  # NOTE MODIFIED
         description='Which fields to show.  By default this is only numeric fields',
     )
 
@@ -63,15 +64,15 @@
 
 
 class SingleStatBaseOptions(OptionsWithTextFormatting):
-    reduceOptions: ReduceDataOptions
-    orientation: VizOrientation
+    reduceOptions: ReduceDataOptions = ReduceDataOptions()  # NOTE MODIFIED
+    orientation: VizOrientation = VizOrientation.auto  # NOTE MODIFIED
 
 
 class PanelOptions(SingleStatBaseOptions):
-    graphMode: BigValueGraphMode
-    colorMode: BigValueColorMode
-    justifyMode: BigValueJustifyMode
-    textMode: BigValueTextMode
+    graphMode: BigValueGraphMode = BigValueGraphMode.area  # NOTE MODIFIED
+    colorMode: BigValueColorMode = BigValueColorMode.value  # NOTE MODIFIED
+    justifyMode: BigValueJustifyMode = BigValueJustifyMode.auto  # NOTE MODIFIED
+    textMode: BigValueTextMode = BigValueTextMode.auto  # NOTE MODIFIED
 
 
 class StatPanelCfg(MyBaseModel):
diff -Nau ../misc/model_generation/raw_generated/statushistorypanelcfg_types_gen.py ../grafana_dashboard/model/statushistorypanelcfg_types_gen.py
--- ../misc/model_generation/raw_generated/statushistorypanelcfg_types_gen.py	2023-07-11 14:03:39.000000000 +0800
+++ ../grafana_dashboard/model/statushistorypanelcfg_types_gen.py	2023-07-11 16:24:00.000000000 +0800
@@ -1,13 +1,13 @@
 # AUTO GENERATED, PLEASE DO NOT MODIFY BY HAND
-
 from __future__ import annotations
 
-from enum import Enum
-from typing import Any, List, Optional, Union
+from typing import Any, Union
 
-from grafana_dashboard.utils import MyBaseModel
 from pydantic import Field, confloat, conint
 
+from grafana_dashboard.extracted_generated_common_models import *
+from grafana_dashboard.utils import MyBaseModel
+
 
 class HideSeriesConfig(MyBaseModel):
     tooltip: bool
@@ -19,23 +19,6 @@
     hideFrom: Optional[HideSeriesConfig] = None
 
 
-class LegendDisplayMode(Enum):
-    list = 'list'
-    table = 'table'
-    hidden = 'hidden'
-
-
-class LegendPlacement(Enum):
-    bottom = 'bottom'
-    right = 'right'
-
-
-class SortOrder(Enum):
-    asc = 'asc'
-    desc = 'desc'
-    none = 'none'
-
-
 class PanelFieldConfig(HideableFieldConfig):
     lineWidth: Optional[conint(ge=0, le=10)] = 1
     fillOpacity: Optional[conint(ge=0, le=100)] = 70
@@ -52,35 +35,12 @@
     )
 
 
-class TooltipDisplayMode(Enum):
-    single = 'single'
-    multi = 'multi'
-    none = 'none'
-
-
 class VisibilityMode(Enum):
     auto = 'auto'
     never = 'never'
     always = 'always'
 
 
-class VizLegendOptions(MyBaseModel):
-    displayMode: LegendDisplayMode
-    placement: LegendPlacement
-    showLegend: bool
-    asTable: Optional[bool] = None
-    isVisible: Optional[bool] = None
-    sortBy: Optional[str] = None
-    sortDesc: Optional[bool] = None
-    width: Optional[float] = None
-    calcs: List[str]
-
-
-class VizTooltipOptions(MyBaseModel):
-    mode: TooltipDisplayMode
-    sort: SortOrder
-
-
 class OptionsWithLegend(MyBaseModel):
     legend: VizLegendOptions
 
diff -Nau ../misc/model_generation/raw_generated/tablepanelcfg_types_gen.py ../grafana_dashboard/model/tablepanelcfg_types_gen.py
--- ../misc/model_generation/raw_generated/tablepanelcfg_types_gen.py	2023-07-11 14:03:39.000000000 +0800
+++ ../grafana_dashboard/model/tablepanelcfg_types_gen.py	2023-07-11 16:51:12.000000000 +0800
@@ -5,9 +5,10 @@
 from enum import Enum
 from typing import List, Optional, Union
 
-from grafana_dashboard.utils import MyBaseModel
 from pydantic import Field
 
+from grafana_dashboard.utils import MyBaseModel
+
 
 class TableCellHeight(Enum):
     sm = 'sm'
@@ -67,7 +68,7 @@
         description='Controls whether the header should show icons for the column types',
     )
     sortBy: Optional[List[TableSortByFieldState]] = Field(
-        None, description='Used to control row sorting'
+        [], description='Used to control row sorting'  # NOTE MODIFIED
     )
     footer: Optional[Union[TableFooterOptions, FooterItem]] = Field(
         {'show': False, 'countRows': False, 'reducer': []},
diff -Nau ../misc/model_generation/raw_generated/textpanelcfg_types_gen.py ../grafana_dashboard/model/textpanelcfg_types_gen.py
--- ../misc/model_generation/raw_generated/textpanelcfg_types_gen.py	2023-07-11 14:03:41.000000000 +0800
+++ ../grafana_dashboard/model/textpanelcfg_types_gen.py	2023-07-11 18:42:43.000000000 +0800
@@ -33,7 +33,7 @@
 
 
 class PanelOptions(MyBaseModel):
-    mode: TextMode
+    mode: TextMode = TextMode.markdown  # NOTE MODIFIED
     code: Optional[CodeOptions] = None
     content: Optional[
         str
diff -Nau ../misc/model_generation/raw_generated/timeseriespanelcfg_types_gen.py ../grafana_dashboard/model/timeseriespanelcfg_types_gen.py
--- ../misc/model_generation/raw_generated/timeseriespanelcfg_types_gen.py	2023-07-11 14:03:34.000000000 +0800
+++ ../grafana_dashboard/model/timeseriespanelcfg_types_gen.py	2023-07-11 16:22:59.000000000 +0800
@@ -1,13 +1,13 @@
 # AUTO GENERATED, PLEASE DO NOT MODIFY BY HAND
-
 from __future__ import annotations
 
-from enum import Enum
-from typing import Any, List, Optional, Union
+from typing import Any, Union
 
-from grafana_dashboard.utils import MyBaseModel
 from pydantic import Field
 
+from grafana_dashboard.extracted_generated_common_models import *
+from grafana_dashboard.utils import MyBaseModel
+
 
 class AxisColorMode(Enum):
     text = 'text'
@@ -30,14 +30,14 @@
 
 
 class BarConfig(MyBaseModel):
-    barAlignment: Optional[BarAlignment] = None
+    barAlignment: Optional[BarAlignment] = BarAlignment.integer_0  # NOTE MODIFIED
     barWidthFactor: Optional[float] = None
     barMaxWidth: Optional[float] = None
 
 
 class FillConfig(MyBaseModel):
     fillColor: Optional[str] = None
-    fillOpacity: Optional[float] = None
+    fillOpacity: Optional[float] = 0  # NOTE MODIFIED
     fillBelowTo: Optional[str] = None
 
 
@@ -70,24 +70,13 @@
 
 
 class HideSeriesConfig(MyBaseModel):
-    tooltip: bool
-    legend: bool
-    viz: bool
+    tooltip: bool = False  # NOTE MODIFIED
+    legend: bool = False  # NOTE MODIFIED
+    viz: bool = False  # NOTE MODIFIED
 
 
 class HideableFieldConfig(MyBaseModel):
-    hideFrom: Optional[HideSeriesConfig] = None
-
-
-class LegendDisplayMode(Enum):
-    list = 'list'
-    table = 'table'
-    hidden = 'hidden'
-
-
-class LegendPlacement(Enum):
-    bottom = 'bottom'
-    right = 'right'
+    hideFrom: Optional[HideSeriesConfig] = HideSeriesConfig()  # NOTE MODIFIED
 
 
 class LineInterpolation(Enum):
@@ -117,17 +106,11 @@
 
 
 class ScaleDistributionConfig(MyBaseModel):
-    type: ScaleDistribution
-    log: Optional[float] = None
+    type: ScaleDistribution = ScaleDistribution.linear  # NOTE MODIFIED
+    log: Optional[float] = 2  # NOTE MODIFIED
     linearThreshold: Optional[float] = None
 
 
-class SortOrder(Enum):
-    asc = 'asc'
-    desc = 'desc'
-    none = 'none'
-
-
 class StackingMode(Enum):
     none = 'none'
     normal = 'normal'
@@ -145,58 +128,35 @@
     )
 
 
-class TooltipDisplayMode(Enum):
-    single = 'single'
-    multi = 'multi'
-    none = 'none'
-
-
 class VisibilityMode(Enum):
     auto = 'auto'
     never = 'never'
     always = 'always'
 
 
-class VizLegendOptions(MyBaseModel):
-    displayMode: LegendDisplayMode
-    placement: LegendPlacement
-    showLegend: bool
-    asTable: Optional[bool] = None
-    isVisible: Optional[bool] = None
-    sortBy: Optional[str] = None
-    sortDesc: Optional[bool] = None
-    width: Optional[float] = None
-    calcs: List[str]
-
-
-class VizTooltipOptions(MyBaseModel):
-    mode: TooltipDisplayMode
-    sort: SortOrder
-
-
 class AxisConfig(MyBaseModel):
-    axisPlacement: Optional[AxisPlacement] = None
+    axisPlacement: Optional[AxisPlacement] = AxisPlacement.auto  # NOTE MODIFIED
     axisColorMode: Optional[AxisColorMode] = None
-    axisLabel: Optional[str] = None
+    axisLabel: Optional[str] = ''  # NOTE MODIFIED
     axisWidth: Optional[float] = None
     axisSoftMin: Optional[float] = None
     axisSoftMax: Optional[float] = None
     axisGridShow: Optional[bool] = None
-    scaleDistribution: Optional[ScaleDistributionConfig] = None
+    scaleDistribution: Optional[ScaleDistributionConfig] = ScaleDistributionConfig()  # NOTE MODIFIED
     axisCenteredZero: Optional[bool] = None
 
 
 class GraphThresholdsStyleConfig(MyBaseModel):
-    mode: GraphTresholdsStyleMode
+    mode: GraphTresholdsStyleMode = GraphTresholdsStyleMode.off  # NOTE MODIFIED
 
 
 class LineConfig(MyBaseModel):
     lineColor: Optional[str] = None
-    lineWidth: Optional[float] = None
-    lineInterpolation: Optional[LineInterpolation] = None
+    lineWidth: Optional[float] = 1  # NOTE MODIFIED
+    lineInterpolation: Optional[LineInterpolation] = LineInterpolation.linear  # NOTE MODIFIED
     lineStyle: Optional[LineStyle] = None
     spanNulls: Optional[Union[bool, float]] = Field(
-        None,
+        False,  # NOTE MODIFIED
         description='Indicate if null values should be treated as gaps or connected.\nWhen the value is a number, it represents the maximum delta in the\nX axis that should be considered connected.  For timeseries, this is milliseconds',
     )
 
@@ -206,8 +166,8 @@
 
 
 class PointsConfig(MyBaseModel):
-    showPoints: Optional[VisibilityMode] = None
-    pointSize: Optional[float] = None
+    showPoints: Optional[VisibilityMode] = VisibilityMode.auto  # NOTE MODIFIED
+    pointSize: Optional[float] = 5  # NOTE MODIFIED
     pointColor: Optional[str] = None
     pointSymbol: Optional[str] = None
 
@@ -218,12 +178,12 @@
 
 
 class PanelOptions(OptionsWithTimezones):
-    legend: VizLegendOptions
-    tooltip: VizTooltipOptions
+    legend: VizLegendOptions = VizLegendOptions()  # NOTE MODIFIED
+    tooltip: VizTooltipOptions = VizTooltipOptions()  # NOTE MODIFIED
 
 
 class StackableFieldConfig(MyBaseModel):
-    stacking: Optional[StackingConfig] = None
+    stacking: Optional[StackingConfig] = StackingConfig()  # NOTE MODIFIED
 
 
 class GraphFieldConfig(
@@ -235,9 +195,9 @@
     StackableFieldConfig,
     HideableFieldConfig,
 ):
-    drawStyle: Optional[GraphDrawStyle] = None
-    gradientMode: Optional[GraphGradientMode] = None
-    thresholdsStyle: Optional[GraphThresholdsStyleConfig] = None
+    drawStyle: Optional[GraphDrawStyle] = GraphDrawStyle.line  # NOTE MODIFIED
+    gradientMode: Optional[GraphGradientMode] = GraphGradientMode.none  # NOTE MODIFIED
+    thresholdsStyle: Optional[GraphThresholdsStyleConfig] = GraphThresholdsStyleConfig()  # NOTE MODIFIED
     transform: Optional[GraphTransform] = None
 
 
diff -Nau ../misc/model_generation/raw_generated/trendpanelcfg_types_gen.py ../grafana_dashboard/model/trendpanelcfg_types_gen.py
--- ../misc/model_generation/raw_generated/trendpanelcfg_types_gen.py	2023-07-11 14:03:35.000000000 +0800
+++ ../grafana_dashboard/model/trendpanelcfg_types_gen.py	2023-07-11 16:24:00.000000000 +0800
@@ -1,13 +1,13 @@
 # AUTO GENERATED, PLEASE DO NOT MODIFY BY HAND
-
 from __future__ import annotations
 
-from enum import Enum
-from typing import List, Optional, Union
+from typing import Union
 
-from grafana_dashboard.utils import MyBaseModel
 from pydantic import Field
 
+from grafana_dashboard.extracted_generated_common_models import *
+from grafana_dashboard.utils import MyBaseModel
+
 
 class AxisColorMode(Enum):
     text = 'text'
@@ -79,17 +79,6 @@
     hideFrom: Optional[HideSeriesConfig] = None
 
 
-class LegendDisplayMode(Enum):
-    list = 'list'
-    table = 'table'
-    hidden = 'hidden'
-
-
-class LegendPlacement(Enum):
-    bottom = 'bottom'
-    right = 'right'
-
-
 class LineInterpolation(Enum):
     linear = 'linear'
     smooth = 'smooth'
@@ -122,47 +111,18 @@
     linearThreshold: Optional[float] = None
 
 
-class SortOrder(Enum):
-    asc = 'asc'
-    desc = 'desc'
-    none = 'none'
-
-
 class StackingMode(Enum):
     none = 'none'
     normal = 'normal'
     percent = 'percent'
 
 
-class TooltipDisplayMode(Enum):
-    single = 'single'
-    multi = 'multi'
-    none = 'none'
-
-
 class VisibilityMode(Enum):
     auto = 'auto'
     never = 'never'
     always = 'always'
 
 
-class VizLegendOptions(MyBaseModel):
-    displayMode: LegendDisplayMode
-    placement: LegendPlacement
-    showLegend: bool
-    asTable: Optional[bool] = None
-    isVisible: Optional[bool] = None
-    sortBy: Optional[str] = None
-    sortDesc: Optional[bool] = None
-    width: Optional[float] = None
-    calcs: List[str]
-
-
-class VizTooltipOptions(MyBaseModel):
-    mode: TooltipDisplayMode
-    sort: SortOrder
-
-
 class AxisConfig(MyBaseModel):
     axisPlacement: Optional[AxisPlacement] = None
     axisColorMode: Optional[AxisColorMode] = None
